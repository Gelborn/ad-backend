name: Deploy Supabase

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_DB_PASSWORD:  ${{ secrets.SUPABASE_DB_PASSWORD }}
      SUPABASE_REF:          ${{ secrets.SUPABASE_REF }}
      # Explicit DB URL so the CLI targets the right Postgres:
      SUPABASE_DB_URL: postgresql://postgres:${{ secrets.SUPABASE_DB_PASSWORD }}@db.${{ secrets.SUPABASE_REF }}.supabase.co:5432/postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Supabase CLI (latest)
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Print Supabase env
        run: |
          echo "Project ref: $SUPABASE_REF"
          echo "DB host: db.$SUPABASE_REF.supabase.co"

      - name: Link project
        run: |
          supabase link \
            --project-ref "$SUPABASE_REF" \
            --password    "$SUPABASE_DB_PASSWORD"

      # ‚úÖ Push migrations without prompts; include any not on remote history
      - name: Push migrations (non-interactive, explicit DB URL)
        run: |
          supabase db push \
            --yes \
            --include-all \
            --db-url "$SUPABASE_DB_URL" \
            --debug

      # Verify: show recent migrations & ensure our maintenance functions exist
      - name: Verify migrations applied
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          echo "---- Recent migrations ----"
          psql "$SUPABASE_DB_URL" -X -v ON_ERROR_STOP=1 -c "
            select version, name, executed_at
            from supabase_migrations.schema_migrations
            order by executed_at desc
            limit 15;
          "
          echo "---- Check maintenance functions ----"
          psql "$SUPABASE_DB_URL" -X -v ON_ERROR_STOP=1 -c "
            select n.nspname as schema, p.proname as function
            from pg_proc p
            join pg_namespace n on n.oid = p.pronamespace
            where n.nspname = 'public'
              and p.proname in (
                'app_get_setting',
                'expire_and_reroute',
                'expire_waiting_donation_intents',
                'deny_donations_past_pickup_deadline',
                'discard_expired_instock_packages'
              )
            order by function;
          "

      - name: Deploy private Edge Functions
        run: |
          private_fns=(
            cf_create_osc
            cf_create_partnership
            cf_create_restaurant
            cf_match_oscs
            cf_update_favorite
            restaurant_create_donation
            restaurant_release_donation
          )
          for fn in "${private_fns[@]}"; do
            echo "üîê Deploying $fn"
            supabase functions deploy "$fn" \
              --project-ref "$SUPABASE_REF" \
              --import-map supabase/functions/import_map.json
          done

      - name: Deploy public Edge Functions (no-verify-jwt)
        run: |
          public_fns=(
            util_cep_info
            osc_accept_donation
            osc_deny_donation
            osc_get_donation_details
            util_send_notifications
          )
          for fn in "${public_fns[@]}"; do
            echo "üåê Deploying $fn (no-verify-jwt)"
            supabase functions deploy "$fn" \
              --project-ref "$SUPABASE_REF" \
              --no-verify-jwt \
              --import-map supabase/functions/import_map.json
          done
